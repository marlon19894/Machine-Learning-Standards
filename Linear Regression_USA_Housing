#Linear Regression using scikit-learn
#USA Housing Dataset


##########Standard Imports##############
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline


########Analysis########
USAhousing = pd.read_csv('USA_Housing.csv')

USAhousing.head()

USAhousing.info()

USAhousing.describe()

USAhousing.columns


#Distribution of the data
sns.pairplot(USAhousing)

#Normaldistribution of the data
sns.distplot(USAhousing['Price'])

#Correlation Heatmap
sns.heatmap(USAhousing.corr())


#########Training the model##########
X = USAhousing[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
               'Avg. Area Number of Bedrooms', 'Area Population']]
y = USAhousing['Price']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train,y_train)

coeff_df = pd.DataFrame(lm.coef_,X.columns,columns=['Coefficient'])

coeff_df


############Predictions#############
predictions = lm.predict(X_test)


#Checking the difference
plt.scatter(y_test,predictions)

#Checking the Residuals
sns.distplot((y_test-predictions),bins=50);


############Performance Evaluation###########
from sklearn import metrics
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

