#################################Linear Regression using scikit-learn##########################################
########################################E-Commerce Dataset#######################################################

#Column Description

# * Avg. Session Length: Durchschnittliche LÃ¤nge einer Style beratung im Laden.
# * Time on App: Average time spent on App
# * Time on Website: Average time spent on Website
# * Length of Membership: Sum of years a customer is member


##########Standard Imports##############
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline


########Exploratory Data Analysis########

customers = pd.read_csv("Ecommerce Customers")

customers.head()

customers.describe()

customers.info()


sns.set_palette("GnBu_d")
sns.set_style('whitegrid')
sns.jointplot(x='Time on Website',y='Yearly Amount Spent',data=customers)


sns.jointplot(x='Time on App',y='Yearly Amount Spent',data=customers)

sns.jointplot(x='Time on App',y='Length of Membership',kind='hex',data=customers)

sns.pairplot(customers)

sns.lmplot(x='Length of Membership',y='Yearly Amount Spent',data=customers)


#########Training the model##########
y = customers['Yearly Amount Spent']
X = customers[['Avg. Session Length', 'Time on App','Time on Website', 'Length of Membership']]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train,y_train)

print('Coefficients: \n', lm.coef_)


############Predictions#############
predictions = lm.predict(X_test)

#Modelfit/Residual Distribution
plt.scatter(y_test,predictions)
plt.xlabel('Y Test')
plt.ylabel('Predicted Y')


############Performance Evaluation###########
from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))


#Normaldistribution of Residuals
sns.distplot((y_test-predictions),bins=50);


#Time on App & Length of Membership have most impact on target 'Yearly Amout Spent'. Website should be optimized!
